print("threshold recall    selectivity ")
badness_rng = np.sort(badness)
badness_rng = (badness_rng[:-1] + badness_rng[1:]) / 2.0
selectivity_values = []
result = []

# Increase threshold until recall excesses "recall_threshold"
for threshold in badness_rng:
    # Label the test samples whether qualified or not
    preds = np.array([0 if(x < threshold) else 1 for x in badness])
    
    # Compute recall
    true_positive, false_negative, true_negative, false_positive = [0,0,0,0]
    for idx in range(test_len):
        actual, pred = test_label[idx], preds[idx]
        if(actual):
            if(pred):
                true_positive += 1
            else:
                false_negative += 1
        else:
            if(pred):
                false_positive += 1
            else:
                true_negative += 1
    recall = true_positive / (true_positive + false_negative)
    selectivity = true_negative / (true_negative + false_positive)

    print("%9.7f " % threshold, end='')
    print("%9.7f " % recall, end='')
    print("%9.7f " % selectivity, end='\r')
    
    result.append([recall, selectivity])
    if(recall > recall_threshold):
        selectivity_values.append([threshold,selectivity])
    else:
        break
        # pass
result = np.array(result)
result_len = len(result)
selectivity_values = np.array(selectivity_values)

# Export the prediction
threshold = selectivity_values[np.argmax(selectivity_values[:,1]), 0]
preds = np.array([0 if(x < threshold) else 1 for x in badness])
np.save('../output/preds.npy', preds)
np.savetxt('../output/preds.csv', preds, delimiter=',')

# Show result w/ graph
import matplotlib.pyplot as plt
plt.clf()
plt.title('Recall and selectivity over threshold')
plt.plot(badness_rng[:result_len], result[:,0], 'b', label='recall')
plt.plot(badness_rng[:result_len], result[:,1], 'g', label='selectivity')
plt.xlabel('detection threshold')
plt.ylabel('selectivity value')
plt.legend()
plt.grid()
plt.savefig('tnrate.png')
print("\n\n")
print("Best threshold  : %6.5f" % threshold)
print("Max selectivitiy: %6.5f" % max(selectivity_values[:,1]))